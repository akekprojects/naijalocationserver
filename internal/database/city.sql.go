// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: city.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addCity = `-- name: AddCity :one
INSERT INTO city ( name,population, state_id) VALUES ($1,$2, $3) 
RETURNING id, name, population, state_id
`

type AddCityParams struct {
	Name       string
	Population string
	StateID    uuid.UUID
}

func (q *Queries) AddCity(ctx context.Context, arg AddCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, addCity, arg.Name, arg.Population, arg.StateID)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Population,
		&i.StateID,
	)
	return i, err
}

const getCities = `-- name: GetCities :many
SELECT id, name, population, state_id FROM city
`

func (q *Queries) GetCities(ctx context.Context) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, getCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Population,
			&i.StateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStateCities = `-- name: GetStateCities :many
SELECT id, name, population, state_id FROM city
WHERE state_id = $1
`

func (q *Queries) GetStateCities(ctx context.Context, stateID uuid.UUID) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, getStateCities, stateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Population,
			&i.StateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
