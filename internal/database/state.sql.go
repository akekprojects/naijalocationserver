// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: state.sql

package database

import (
	"context"
	"database/sql"
)

const getAllStates = `-- name: GetAllStates :many
SELECT id, name, capital FROM states
`

func (q *Queries) GetAllStates(ctx context.Context) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, getAllStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(&i.ID, &i.Name, &i.Capital); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getState = `-- name: GetState :one
SELECT id, name, capital FROM states
WHERE name = $1
`

func (q *Queries) GetState(ctx context.Context, name string) (State, error) {
	row := q.db.QueryRowContext(ctx, getState, name)
	var i State
	err := row.Scan(&i.ID, &i.Name, &i.Capital)
	return i, err
}

const getStatesA = `-- name: GetStatesA :many
SELECT id, name, capital FROM states
WHERE name LIKE $1 || '%'
`

func (q *Queries) GetStatesA(ctx context.Context, dollar_1 sql.NullString) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, getStatesA, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(&i.ID, &i.Name, &i.Capital); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
